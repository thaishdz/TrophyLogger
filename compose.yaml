services: # los servicios son los contenedores que se ejecutan
  # servicio para la API de node
  api:
    build: # Define cómo construir la imagen Docker
      context: ./server # Directorio donde Docker buscará los archivos para construir la imagen
      dockerfile: Dockerfile # Le dice a Docker que use el Dockerfile en el directorio actual para construir la imagen
    container_name: api
    ports:
      - "5001:5000"
    env_file:
      - server/src/config/.env # Carga las variables de entorno desde el archivo .env
    volumes: # Mapea los directorios locales con los directorios dentro del contenedor
      - ./server:/app  # Mapea todo el directorio actual, así podrá obtener el package.json para ejecutar el script "start"
      - /app/node_modules  # Evita conflictos con node_modules local
    networks:
      - trophy-network
  

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000" 
    volumes:
      - ./client:/app
    environment:
      - CHOKIDAR_USEPOLLING=true  # Para sistemas de archivos en contenedores
      - WATCHPACK_POLLING=true 
      - WDS_SOCKET_HOST=localhost     # ← Para WebSocket
      - WDS_SOCKET_PORT=3000          # ← Puerto WebSocket
    depends_on:
      - api 
    networks:
      - trophy-network

# Red para que los contenedores se comuniquen
networks:
  trophy-network:
    driver: bridge